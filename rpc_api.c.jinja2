// THIS FILE IS AUTOGENERATED, DO NOT EDIT

#include "rpc_api.h"

static const uint8_t rpc_hash_salt1[] = {@= salt1 =@};
static const uint8_t rpc_hash_salt2[] = {@= salt2 =@};
static const size_t salt_size = sizeof(rpc_hash_salt1);

static const int32_t rpc_hash_graph[] = {@= graph =@};
static const size_t rpc_hash_graph_size = sizeof(rpc_hash_graph) / sizeof(int);

static const char *rpc_hash_table[] = {@= keys =@};
static const size_t rpc_hash_num_keys = sizeof(rpc_hash_table) / sizeof(char *);

static int32_t rpc_hash(const char *key, const uint8_t *salt) {
    int i, sum = 0;
    for (i = 0; key[i] != '\0'; i++) {
        sum += salt[i] * key[i];
        sum %= rpc_hash_graph_size;
    }
    return rpc_hash_graph[sum];
}

static bool rpc_strcmp(const char *s1, const char *s2) {
    for (size_t i=0; s1[i] != '\0'; i++) {
        if (s1[i] != s2[i]) return false;
    }
    return true;
}

static bool rpc_strlen(const char *s1) {
    size_t i = 0;
    for (; s1[i] != '\0'; i++);
    return i;
}

size_t rpc_lookup_index_by_key(const char *key) {
    size_t index = 0;
    if (rpc_strlen(key) <= salt_size) {
        index = (rpc_hash(key, rpc_hash_salt1) + rpc_hash(key, rpc_hash_salt2)) % rpc_hash_graph_size;
    }

    if (index < rpc_hash_num_keys && rpc_strcmp(key, rpc_hash_table[index])) {
        return index;
    }

    return -1;
}

const char *rpc_lookup_key_by_index(size_t index) {
    if (index >= rpc_get_key_count()) return NULL;
    return rpc_hash_table[index];
}

size_t rpc_get_key_count() {
    return rpc_hash_num_keys;
}